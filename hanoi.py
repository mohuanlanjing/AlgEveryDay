#coding: utf-8
"""
汉诺塔算法
"""
import sys

def hanoi(n, a, b, c):
    """
    这个递归算法很简单，首先要明确的一点是，当有N（N>1)个盘的时候，如果想A最下面一个盘移动到C，
    则必须有剩下N-1个盘都在B的情况下才能实现，而当最下面一个盘移到C后，如果想倒数第二个盘移动到C，
    则必须剩下N-2个盘都在A的时候才能实现，以此类推，也就是说，这个算法有三步：
    第一步，将N-1个盘子移动到B（借助C），
    第二步，移动底盘到C， 
    第三步，将N-1个盘子从B移动到C 
    """
    if n == 1: # N为1的时候，直接移动
        print '%s -> %s'%(a, c)
    else: 
        hanoi(n-1, a, c, b) # 借助C移动N-1盘子到B
        print '%s -> %s'%(a, c) # 移动底盘到C
        hanoi(n-1, b, a, c) # 借助A移动N-1个盘子到C

if __name__ == "__main__":
    n = 3
    a = 'a'
    b = 'b'
    c = 'c'
    hanoi(n, a, b, c)
